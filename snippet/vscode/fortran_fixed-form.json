{
	// Place your snippets for fortran_fixed-form here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// 类型声明
	"declare int": {
		"prefix": "int",
		"body": "integer(${1:4}) $0",
		"description": "声明 integer"
	},
	"declare logical":{
		"prefix": "bool",
		"body": "logical $0",
		"description": "声明 logical"
	},
	"declare real(4)":{
		"prefix": "float",
		"body": "real(4) $0",
		"description": "声明 real(4)",
	},
	"declare real(8)":{
		"prefix": "double",
		"body": "real(8) $0",
		"description": "声明 real(8)",
	},
	"declare complex":{
		"prefix": "comp",
		"body": "complex(${1:8}) $0"
	},
	"declare character":{
		"prefix": "char",
		"body": "character*($1) $0",
		"description": "声明 character"
	},
	// 缩写
	".true.":{
		"prefix": "true",
		"body": ".true.",
		"description": ".true. 缩写"
	},
	".false.":{
		"prefix": "false",
		"body": ".false.",
		"description": ".false. 缩写"
	},
	"parameter":{
		"prefix": "para",
		"body": "parameter",
		"description": "parameter 缩写"
	},
	"equivalence":{
		"prefix": "equi",
		"body": "equivalence($1, $2)$0",
		"description": "equivalence 缩写"
	},
	"module procedure":{
		"prefix": "modp",
		"body": "module procedure $0",
		"description": "module procedure"
	},
	"elemental":{
		"prefix": "ele",
		"body": "elemental $0",
		"description": "elemental 缩写"
	},
	// 代码块
	"program block":{
		"prefix": "pro",
		"body": [
			"      program $1",
			"        implicit none",
			"        $0",
			"      end program $1"
		],
		"description": "program 代码块"
	},
	"if block":{
		"prefix": "if",
		"body": [
			"if (${1:condition}) then",
			"  $0",
			"end if"
		],
		"description": "if 代码块"
	},
	"select block":{
		"prefix": "slt",
		"body": [
			"select case(${1:value})",
			"case($0)",
			"case default",
			"end select"
		],
		"description": "select 代码块"
	},
	"do range":{
		"prefix": "do",
		"body": [
			"do ${1:i=1:N}",
			"  $0",
			"end do"
		],
		"description": "end do"
	},
	"do while":{
		"prefix": "dow",
		"body": [
			"do while(${1:condition})",
			"  $0",
			"end do"
		],
		"description": "do while代码块"
	},
	// 函数代码块
	"subroutine block":{
		"prefix": "sub",
		"body": [
			"subroutine $1(${2:args})",
			"  implicit none",
			"  $0",
			"end subroutine $1"
		],
		"description": "subroutine 代码块"
	},
	"function block":{
		"prefix": "fun",
		"body": [
			"function ${1}(${2:args})",
			"  implicit none",
			"  $0",
			"end function ${1}"
		],
		"description": "function 代码块"
	},
	"recursive function":{
		"prefix": "rfun",
		"body": [
			"recursive ${1:type} function $2(${3:args}) result(ans)",
			"  implicit none",
			"  $0",
			"end function $2"
		],
		"description": "recursive function"
	},
	"module block":{
		"prefix": "mod",
		"body": [
			"module $1",
			"  $0",
			"end module $1"
		],
		"description": "module 代码块"
	},
	"interface block":{
		"prefix": "itf",
		"body": [
			"interface$1",
			"$0",
			"end interface$1"
		],
		"description": "interface 代码块"
	}
}